// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.google.devicehub.proto";
option java_outer_classname = "DeviceHubProto";
option objc_class_prefix = "MHS";

package com.google.devicehub.proto;

// The Device Hub service definition.
service DeviceHub {
  // Sends a device request
  rpc SendDeviceRequest(DeviceRequest) returns (DeviceResponse) {
  }

  // Get the devices of the given type
  rpc GetDevices(DeviceType) returns (Devices) {
  }

  // Register a device so that it can receive custom code requests, this is
  // for Android only for now
  rpc RegisterDevice(stream SmartDeviceMessage)
      returns (stream SmartDeviceRequest) {
  }
}

// The device types we support so far
enum DeviceTypeEnum {
  DEVICE_TYPE_UNSPECIFIED = 0;
  ANDROID = 1;
  IOS = 2;
  ROBOTIC_DEVICE = 3;
  SPIRENT_RPS = 4;
  WEB_CAM = 5;
  GENERIC_SCRIPT = 6;
  CHAMELEON_DEVICE = 7;
}

// The device type
message DeviceType {
  DeviceTypeEnum type = 1;
}

// A list of devices
message Devices {
  repeated Device device = 1;
}

// The device
message Device {
  DeviceTypeEnum type = 1;
  string id = 2;
  // Label can be used to represent a role of the device in the testbed
  // definition
  string label = 3;
  // Key-value pairs of all the dimensions that apply to the device
  map<string, string> dimensions = 4;
}

// The device filter used by the test to find the device
message DeviceFilter {
  DeviceTypeEnum device_type = 1;
  string device_id = 2;
  string device_label = 3;
}

// The device request message send by the test case
message DeviceRequest {
  // Device identifier
  DeviceFilter device_filter = 1;

  // This could be the custom code request data for smart device, in which case
  // the code will be run on the device; or some requests for "dumb" devices
  // where the code will be run on the hub
  CustomCodeEndpoint custom_code_endpoint = 2;
}

// Status of the device request
enum DeviceRequestStatusEnum {
  DEVICE_REQUEST_STATUS_UNSPECIFIED = 0;
  SUCCESS = 1;
  FAILURE = 2;
}

// The custome code to run on a smart device, this is to ask the device to
// run a piece of code that is provided by the test author.
message CustomCodeEndpoint {
  // The name of the custom code to run, test author needs provide this in
  // ClientDeviceRequest
  string target_name = 1;

  // A binary blob as serialized from a protobuf message that should be
  // deserialized and intepreted by the custom code on the device. The test
  // author needs provide this in ClientDeviceRequest
  bytes custom_code_parms = 2;
}

// The request sent to smart device which includes a CustomCodeEndPoint and
// a UUID of the request which will be sent back to the server to match
// the original request
message SmartDeviceRequest {
  CustomCodeEndpoint endpoint = 1;
  string uuid = 2;
}

// The smart device message type: either REGISTER which indicates it is the
// first time that the device sends message to the hub or CUSTOM_CODE_RESPONSE
// which represents the device response to a custom code request
enum SmartDeviceMessageTypeEnum {
  SMART_DEVICE_RESPONSE_TYPE_UNSPECIFIED = 0;
  REGISTER = 1;
  CUSTOM_CODE_RESPONSE = 2;
}

// The message sent from a smart device. Currently only Android device is
// being classiefied as a smart device. A smart device connects to the hub first
// to register itself before being able to accept request.
message SmartDeviceMessage {
  // Device
  Device device = 1;

  // REGISTER or CUSTOM_CODE_RESPONSE
  SmartDeviceMessageTypeEnum message_type = 2;

  // The actual response if the type is CUSTOM_CODE_RESPONSE, empty otherwise
  DeviceResponse device_response = 3;

  // The UUID from the original request
  string uuid = 4;
}

// The response from the hub to the client, this can be generated by the custom
// code from smart devices or the hub code for dumb devices
message DeviceResponse {
  DeviceRequestStatusEnum status = 1;

  string error_message = 2;

  // A binary blob as serialized from a protobuf message that should be
  // deserialized and intepreted by the test case.
  bytes response_data = 3;
}
